function t(t){const n=t.nextInstruction();t.instructionIndex=n}const n={0:function(t){console.log("halt")},1:function(t){t.stack.push(t.nextInstruction())},2:function(t){console.log(t.registers[t.nextInstruction()])},3:function(t){t.registers[0]=t.nextInstruction(),t.registers[1]=t.nextInstruction(),t.registers[2]=t.registers[0]+t.registers[1]},4:function(t){const n=t.stack.pop();t.registers[t.nextInstruction()]=n},5:function(t){t.registers[t.nextInstruction()]+=t.nextInstruction()},6:t,7:function(n){n.registers[2]>n.registers[3]?n.instructionIndex++:t(n)},8:function(n){n.registers[2]>=n.registers[3]?n.instructionIndex++:t(n)},10:function(t){return null},9:function(t){return null}};class s{constructor(t){this.stack=[],this.registers=new Int32Array(4),this.instructionIndex=0,this.instructions=t}nextInstruction(){return this.instructions[this.instructionIndex++]}}console.time("vm_test");const i=new class{constructor(t){this.vmState=new s(t)}run(){let t;do{t=this.vmState.instructions[this.vmState.instructionIndex++],n[t](this.vmState)}while(0!==t);return 0}}(Int32Array.from([1,1e6,4,3,2,3,9,5,2,1,8,6,0]));i.run(),console.log(JSON.stringify(i.vmState)),console.timeLog("vm_test");
